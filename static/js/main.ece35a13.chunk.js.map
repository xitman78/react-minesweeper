{"version":3,"sources":["components/Cell.tsx","components/Row.tsx","components/ClearButton.tsx","store/action.ts","components/Timer.tsx","components/Grid.tsx","containers/Game.tsx","containers/Rules.tsx","App.tsx","helpers/getNeighborCells.ts","helpers/getInitialState.ts","helpers/openCellsRecursively.ts","store/store.ts","store/reducer.ts","helpers/handleDoubleClickRecursively.ts","index.tsx"],"names":["CellContent","styled","div","_templateObject","CellWrapper","_templateObject2","_ref","isOpen","_ref2","connect","state","ownProps","rows","rowIndex","colIndex","props","dataSet","data-type","data-row","data-col","react","Object","assign","isMine","neighborMines","isMarked","RowWrapper","Row_templateObject","rowLength","length","cells","Array","fill","map","_","i","cellIndex","components_Cell","key","ClearButtonContainer","button","ClearButton_templateObject","gameState","newGame","type","onClick","Timer","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","interval","startedAt","endAt","isTimerStarted","handleInterval","bind","assertThisInitialized","prevProps","prevState","setInterval","clearInterval","setState","Date","now","minesLeft","toFixed","React","mines","minesMarked","GridContainer","Grid_templateObject","clickHandler","event","handler","target","HTMLDivElement","dataset","row","col","parseInt","isNaN","console","error","preventDefault","stopPropagation","rowsCount","cellClick","cellRightClick","doubleClick","onContextMenu","onDoubleClick","components_Timer","components_Row","components_ClearButton","MainContainer","Game_templateObject","InputsContainer","Game_templateObject2","Input","input","_templateObject3","Label","label","_templateObject4","Game","handleInputChange","cols","_this2","num","value","defineProperty","name","resetGame","htmlFor","id","onChange","components_Grid","columns","PageContainer","Rules_templateObject","RulesContainer","Rules_templateObject2","Rules","href","Menu","App_templateObject","Nav","Link","App_templateObject2","App","HashRouter","to","Switch","Route","exact","path","component","getNeighborCells","startCellIndex","Math","max","endCellIndex","topNeighbors","slice","cell","leftCell","rightCell","bottomNeighbors","concat","getInitialState","minesCount","minesArray","notMineCellsCount","notMinesArray","mineSeeder","sort","random","seedCounter","allRows","objectSpread","ri","ci","filter","forEach","cellsOpened","openCellsRecursively","opened","neighborCells","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","err","return","store","createStore","action","log","handleDoubleClickRecursively","notOpenedCells","totalOpened","nextCycleCells","sealedCell","push","_i","_nextCycleCells","openedCell","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","BrowserRouter","es","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.ece35a13.chunk.js","sourcesContent":["import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { connect } from \"react-redux\";\nimport { CellValue, GridState } from \"../store/types\";\n\nexport interface CellProps extends CellValue {\n  rowIndex: number;\n  colIndex: number;\n}\n\nconst CellContent = styled.div`\n  font-size: 1.8em;\n  user-select: none;\n`;\n\nconst CellWrapper = styled(\"div\")<{ isMine: boolean; isOpen: boolean }>`\n  width: 60px;\n  height: 60px;\n  border-radius: 10px;\n  display: flex;\n  flex-direction: column;\n\n  justify-content: center;\n\n  @media (max-width: 700px) {\n    width: 40px;\n    height: 40px;\n    border-radius: 8px;\n  }\n\n  margin: 3px;\n\n  background-color: ${({ isOpen }) => (isOpen ? \"orange\" : \"white\")};\n\n  &:hover {\n    background-color: ${({ isOpen }) => (isOpen ? \"#ffb510\" : \"#efefef\")};\n  }\n\n  transition: background-color 0.3s ease-out;\n`;\n\nconst Cell: React.SFC<CellProps> = props => {\n  const dataSet = {\n    \"data-type\": \"cell\",\n    \"data-row\": props.rowIndex,\n    \"data-col\": props.colIndex\n  };\n  return (\n    <CellWrapper isMine={props.isMine} isOpen={props.isOpen} {...dataSet}>\n      {props.isOpen ? (\n        <>\n          {props.neighborMines ? (\n            <CellContent {...dataSet}>{props.neighborMines}</CellContent>\n          ) : null}\n          {props.isMine ? <CellContent {...dataSet}>💣</CellContent> : null}\n        </>\n      ) : (\n        props.isMarked && <CellContent {...dataSet}>⚑</CellContent>\n      )}\n    </CellWrapper>\n  );\n};\n\nconst mapStateToProps = (\n  state: GridState,\n  ownProps: { rowIndex: number; colIndex: number }\n) => {\n  return state.rows[ownProps.rowIndex][ownProps.colIndex];\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(Cell);\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { connect } from \"react-redux\";\nimport Cell from \"./Cell\";\nimport { GridState } from \"../store/types\";\n\nconst RowWrapper = styled.div`\n  display: flex;\n  flex-wrap: nowrap;\n`;\n\nexport interface RowProps {\n  rowLength: number;\n  rowIndex: number;\n}\n\nconst Row: React.SFC<RowProps> = ({ rowLength, rowIndex }) => {\n  const cells: number[] = new Array(rowLength).fill(1).map((_, i) => i);\n  return (\n    <RowWrapper>\n      {cells.map(cellIndex => (\n        // @ts-ignore\n        <Cell key={cellIndex} rowIndex={rowIndex} colIndex={cellIndex} />\n      ))}\n    </RowWrapper>\n  );\n};\n\nconst mapStateToProps = (state: GridState) => ({\n  rowLength: state.rows[0].length\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(Row);\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { connect } from \"react-redux\";\nimport {GameState, GridState} from \"../store/types\";\nimport { newGame } from \"../store/action\";\n\nconst ClearButtonContainer = styled.button`\n  margin-top: 20px;\n  padding: 10px;\n  border: none;\n  background-color: #66cc66;\n  font-size: 1.2em;\n  color: white;\n  cursor: pointer;\n  border-radius: 10px;\n  outline: none;\n  min-width: 100px;\n  &:hover {\n    background-color: #77dd77;\n  }\n`;\n\nexport interface ClearButtonProps {\n  gameState: GameState;\n  newGame: typeof newGame;\n}\n\nconst ClearButton: React.SFC<ClearButtonProps> = ({ gameState, newGame }) => {\n  return (\n    <ClearButtonContainer onClick={newGame}>\n      {(gameState === \"game\" || gameState === \"new\") && \"New\"}\n      {gameState === \"win\" && \"😃\"}\n      {gameState === \"over\" && \"😵\"}\n    </ClearButtonContainer>\n  );\n};\n\nconst mapStateToProps = (state: GridState) => ({\n  gameState: state.gameState\n});\n\nexport default connect(\n  mapStateToProps,\n  {\n    newGame\n  }\n)(ClearButton);\n","import {\n  ClickAction,\n  DoubleClickAction,\n  NewGame,\n  ResetGame,\n  RightClickAction\n} from \"./actionTypes\";\n\nexport function newGame(): NewGame {\n  return {\n    type: \"newGame\"\n  };\n}\n\nexport function resetGame(\n  rows: number,\n  columns: number,\n  mines: number\n): ResetGame {\n  return {\n    type: \"reset\",\n    rows,\n    columns,\n    mines\n  };\n}\n\nexport function cellClick(rowIndex: number, cellIndex: number): ClickAction {\n  return {\n    type: \"click\",\n    rowIndex,\n    cellIndex\n  };\n}\n\nexport function cellRightClick(\n  rowIndex: number,\n  cellIndex: number\n): RightClickAction {\n  return {\n    type: \"rightClick\",\n    rowIndex,\n    cellIndex\n  };\n}\n\nexport function doubleClick(\n  rowIndex: number,\n  cellIndex: number\n): DoubleClickAction {\n  return {\n    type: \"doubleClick\",\n    rowIndex,\n    cellIndex\n  };\n}\n","import * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { GameState, GridState } from \"../store/types\";\n\nexport interface TimerProps {\n  gameState: GameState;\n  minesLeft: number;\n}\n\nexport interface TimerState {\n  startedAt: number;\n  endAt: number;\n  isTimerStarted: boolean;\n}\n\nclass Timer extends React.Component<TimerProps, TimerState> {\n  interval: number | null = null;\n\n  constructor(props: TimerProps) {\n    super(props);\n    this.state = { startedAt: 0, endAt: 0, isTimerStarted: false };\n    this.handleInterval = this.handleInterval.bind(this);\n  }\n\n  static getDerivedStateFromProps(\n    props: TimerProps,\n    state: TimerState\n  ): TimerState | null {\n    if (props.gameState === \"game\" && !state.isTimerStarted) {\n      const now = Date.now();\n      return {\n        startedAt: now,\n        endAt: now,\n        isTimerStarted: true\n      };\n    }\n\n    if (props.gameState === \"new\") {\n      return {\n        startedAt: 0,\n        endAt: 0,\n        isTimerStarted: false\n      };\n    }\n\n    if (\n      (props.gameState === \"win\" || props.gameState === \"over\") &&\n      state.isTimerStarted\n    ) {\n      return {\n        startedAt: state.startedAt,\n        endAt: Date.now(),\n        isTimerStarted: false\n      };\n    }\n\n    return null;\n  }\n\n  componentDidUpdate(prevProps: TimerProps, prevState: TimerState) {\n    if (!prevState.isTimerStarted && this.state.isTimerStarted) {\n      this.interval = setInterval(this.handleInterval, 100);\n    } else if (\n      prevState.isTimerStarted &&\n      !this.state.isTimerStarted &&\n      this.interval\n    ) {\n      clearInterval(this.interval);\n      this.interval = null;\n    }\n  }\n\n  handleInterval() {\n    this.setState({\n      endAt: Date.now()\n    });\n  }\n\n  render() {\n    return (\n      <>\n        <div>Mines: {this.props.minesLeft}</div>\n        <div>\n          {((this.state.endAt - this.state.startedAt) / 1000).toFixed(1)}\n        </div>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GridState) => ({\n  gameState: state.gameState,\n  minesLeft: state.mines - state.minesMarked\n});\n\nexport default connect(mapStateToProps)(Timer);\n","import * as React from \"react\";\nimport Row from \"./Row\";\nimport styled from \"styled-components\";\nimport { connect } from \"react-redux\";\nimport ClearButton from \"./ClearButton\";\nimport { GridState } from \"../store/types\";\nimport Timer from \"./Timer\";\nimport { cellClick, cellRightClick, doubleClick } from \"../store/action\";\n\nconst GridContainer = styled.div`\n  margin-top: 20px;\n  border-radius: 30px;\n  padding: 20px;\n  text-align: center;\n  background-color: #ddd;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nexport interface GridProps {\n  rowsCount: number;\n  rowLength: number;\n  cellClick: typeof cellClick;\n  cellRightClick: typeof cellRightClick;\n  doubleClick: typeof doubleClick;\n}\n\nfunction clickHandler(\n  event: React.MouseEvent,\n  handler: typeof cellClick | typeof cellRightClick | typeof doubleClick\n) {\n  if (event.target instanceof HTMLDivElement) {\n    let dataset = event.target.dataset;\n    if (dataset && dataset.type === \"cell\") {\n      if (!dataset.row || !dataset.col) {\n        return;\n      }\n      const rowIndex = parseInt(dataset.row, 10);\n      const cellIndex = parseInt(dataset.col, 10);\n      if (isNaN(rowIndex) || isNaN(cellIndex)) {\n        console.error(\"invalid cell index\");\n        return;\n      }\n      event.preventDefault();\n      event.stopPropagation();\n      handler(rowIndex, cellIndex);\n    }\n  }\n}\n\nconst Grid: React.SFC<GridProps> = props => {\n  return (\n    <GridContainer\n      onClick={event => clickHandler(event, props.cellClick)}\n      onContextMenu={event => clickHandler(event, props.cellRightClick)}\n      onDoubleClick={event => clickHandler(event, props.doubleClick)}\n    >\n      <Timer />\n      {new Array(props.rowsCount).fill(0).map((_, rowIndex) => (\n        <Row key={rowIndex} rowIndex={rowIndex} rowLength={props.rowLength}/>\n      ))}\n      <ClearButton />\n    </GridContainer>\n  );\n};\n\nconst mapStateToProps = (state: GridState) => ({\n  rowsCount: state.rows.length,\n  rowLength: state.rows[0].length,\n});\n\nexport default connect(\n  mapStateToProps,\n  {\n    cellClick,\n    cellRightClick,\n    doubleClick\n  }\n)(Grid);\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { connect } from \"react-redux\";\nimport Grid from \"../components/Grid\";\nimport { resetGame } from \"../store/action\";\n\nconst MainContainer = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst InputsContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  margin-top: 20px;\n`;\n\nconst Input = styled.input`\n  margin-left: 10px;\n  padding: 3px 10px;\n  font-size: 14px;\n  width: 50px;\n`;\n\nconst Label = styled.label`\n  margin-left: 40px;\n  font-size: 12px;\n  padding-top: 6px;\n`;\n\ninterface AppState {\n  rows: number;\n  cols: number;\n  mines: number;\n}\n\nexport interface GameProps {\n  resetGame: typeof resetGame;\n}\n\nclass Game extends React.Component<GameProps, AppState> {\n  constructor(props: GameProps) {\n    super(props);\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n\n    this.state = {\n      rows: 10,\n      cols: 10,\n      mines: 10\n    };\n  }\n\n  handleInputChange(event: React.ChangeEvent<HTMLInputElement>) {\n    let num = parseInt(event.target.value, 10);\n    if (isNaN(num) || num <= 0) {\n      num = 1;\n    }\n    this.setState(\n      // @ts-ignore\n      {\n        [event.target.name]: num\n      },\n      () => {\n        this.props.resetGame(\n          this.state.rows,\n          this.state.cols,\n          this.state.mines\n        );\n      }\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <InputsContainer>\n          <Label htmlFor=\"rowsInput\">Rows:</Label>\n          <Input\n            id=\"rowsInput\"\n            type=\"number\"\n            name=\"rows\"\n            value={this.state.rows}\n            onChange={this.handleInputChange}\n          />\n          <Label htmlFor=\"colsInput\">Columns:</Label>\n          <Input\n            id=\"colsInput\"\n            type=\"number\"\n            name=\"cols\"\n            value={this.state.cols}\n            onChange={this.handleInputChange}\n          />\n          <Label htmlFor=\"colsInput\">Mines:</Label>\n          <Input\n            id=\"minesInput\"\n            type=\"number\"\n            name=\"mines\"\n            value={this.state.mines}\n            onChange={this.handleInputChange}\n          />\n        </InputsContainer>\n        <MainContainer>\n          <Grid />\n        </MainContainer>\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  {\n    resetGame\n  }\n)(Game);\n","import * as React from \"react\";\nimport styled from \"styled-components\";\n\nconst PageContainer = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst RulesContainer = styled.div`\n  max-width: 500px;\n  min-width: 400px;\n`;\n\nexport interface RulesProps {\n\n}\n\nconst Rules: React.SFC<RulesProps> = () => {\n  return (\n    <PageContainer>\n      <RulesContainer>\n        <h2>Game Rules</h2>\n        <p>This is web version of the classic <a\n          href=\"https://en.wikipedia.org/wiki/Minesweeper_(video_game)\"\n          target=\"_blank\">minesweeper puzzle.</a></p>\n        <p>To win just mark all mines on the field!</p>\n        <p><strong>Left click</strong> - Open a cell</p>\n        <p><strong>Right click</strong> - Mark a cell as containing a mine</p>\n        <p><strong>Double click</strong> - Smart move. Double click an opened\n        cell which has a number inside to open all closed neighbor cells.\n        But it works only If the number in the cell corresponds to a number\n        of marked mines in the neighborhood.</p>\n        <hr/>\n        Source code on <a href=\"https://github.com/xitman78/react-minesweeper\"\n          target=\"_blank\">GitHub</a>\n        <p>Developed by <a href=\"https://alexander-cherepnya.netlify.com\"\n          target=\"_blank\">Alexander Cherepnya</a></p>\n      </RulesContainer>\n    </PageContainer>\n  );\n};\n\nexport default Rules;\n","import * as React from \"react\";\nimport styled from \"styled-components\";\nimport { Route, Switch, Link, HashRouter } from \"react-router-dom\";\nimport Game from \"./containers/Game\";\nimport Rules from \"./containers/Rules\";\n\nconst Menu = styled.div`\n  display: flex;\n  margin-top: 20px;\n  justify-content: center;\n`;\n\nconst Nav = styled(Link)`\n  margin-right: 16px;\n`;\n\nexport interface AppRouterProps {}\n\nclass App extends React.Component<AppRouterProps> {\n  render() {\n    return (\n      <div>\n        <HashRouter>\n          <>\n            <Menu>\n              <Nav to=\"/\">Game</Nav>\n              <Nav to=\"/about\">Rules</Nav>\n            </Menu>\n            <Switch>\n              <Route exact path=\"/\" component={Game} />\n              <Route exact path=\"/about\" component={Rules} />\n            </Switch>\n          </>\n        </HashRouter>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { CellValue } from \"../store/types\";\n\nexport interface GetNeighborCellsResponseItem {\n  cell: CellValue;\n  rowIndex: number;\n  cellIndex: number;\n}\n\nexport function getNeighborCells(\n  rows: Array<CellValue[]>,\n  rowIndex: number,\n  cellIndex: number\n): Array<GetNeighborCellsResponseItem> {\n  const startCellIndex = Math.max(cellIndex - 1, 0);\n  const endCellIndex = startCellIndex + (cellIndex === 0 ? 2 : 3);\n  const topNeighbors: GetNeighborCellsResponseItem[] =\n    rowIndex === 0\n      ? []\n      : rows[rowIndex - 1]\n          .slice(startCellIndex, endCellIndex)\n          .map((cell, i) => ({\n            cell,\n            rowIndex: rowIndex - 1,\n            cellIndex: startCellIndex + i\n          }));\n\n  const leftCell: GetNeighborCellsResponseItem[] =\n    cellIndex === 0\n      ? []\n      : [\n          {\n            cell: rows[rowIndex][cellIndex - 1],\n            rowIndex,\n            cellIndex: cellIndex - 1\n          }\n        ];\n\n  const rightCell: GetNeighborCellsResponseItem[] =\n    cellIndex === rows[0].length - 1\n      ? []\n      : [\n          {\n            cell: rows[rowIndex][cellIndex + 1],\n            rowIndex,\n            cellIndex: cellIndex + 1\n          }\n        ];\n\n  const bottomNeighbors: GetNeighborCellsResponseItem[] =\n    rowIndex === rows.length - 1\n      ? []\n      : rows[rowIndex + 1]\n          .slice(startCellIndex, endCellIndex)\n          .map((cell, i) => ({\n            cell,\n            rowIndex: rowIndex + 1,\n            cellIndex: startCellIndex + i\n          }));\n\n  return topNeighbors.concat(leftCell, rightCell, bottomNeighbors);\n}\n","import { GridState, CellValue } from \"../store/types\";\nimport { getNeighborCells } from \"./getNeighborCells\";\n\nexport function getInitialState(\n  rows: number,\n  cols: number,\n  minesCount: number\n): GridState {\n  const minesArray = new Array(minesCount).fill(true);\n  const notMineCellsCount = rows * cols - minesCount;\n  const notMinesArray = new Array(\n    notMineCellsCount >= 0 ? notMineCellsCount : 0\n  ).fill(false);\n\n  const mineSeeder = minesArray\n    .concat(notMinesArray)\n    .sort(() => Math.random() - 0.5); // shuffle seed array\n\n  let seedCounter = 0;\n\n  const allRows = new Array<Array<CellValue[]>>(rows).fill([]).map(_ =>\n    new Array(cols)\n      .fill({\n        isMine: false,\n        isOpen: false,\n        isMarked: false,\n        neighborMines: 0\n      })\n      .map(cell => ({\n        ...cell,\n        isMine: mineSeeder[seedCounter++]\n      }))\n  );\n\n  for (let ri = 0; ri < rows; ri++) {\n    for (let ci = 0; ci < cols; ci++) {\n      if (allRows[ri][ci].isMine) {\n        const neighborCells = getNeighborCells(allRows, ri, ci).filter(\n          cell => !cell.cell.isMine\n        );\n        neighborCells.forEach(cell => {\n          cell.cell.neighborMines++;\n        });\n      }\n    }\n  }\n\n  return {\n    rows: allRows,\n    minesMarked: 0,\n    cellsOpened: 0,\n    gameState: \"new\",\n    mines: minesCount\n  };\n}\n","import { CellValue } from \"../store/types\";\nimport { getNeighborCells } from \"./getNeighborCells\";\n\ninterface OpenCellsRecursivelyResponse {\n  opened: number;\n}\n\nexport function openCellsRecursively(\n  allRows: Array<CellValue[]>,\n  rowIndex: number,\n  cellIndex: number\n): OpenCellsRecursivelyResponse {\n  if (allRows[rowIndex][cellIndex].isOpen) {\n    // already opened\n    return {\n      opened: 0\n    };\n  }\n  allRows[rowIndex] = allRows[rowIndex].slice(); // copy row\n  allRows[rowIndex][cellIndex] = {\n    ...allRows[rowIndex][cellIndex],\n    isOpen: true\n  };\n  if (allRows[rowIndex][cellIndex].neighborMines > 0) {\n    // there are neighbor mines - open only one cell\n    return {\n      opened: 1\n    };\n  }\n  // else get all neighbor cells and call this function recursively\n  let cellsOpened = 1;\n\n  const neighborCells = getNeighborCells(allRows, rowIndex, cellIndex).filter(\n    cell => !cell.cell.isMine && !cell.cell.isMarked\n  );\n\n  for (let cell of neighborCells) {\n    const { opened } = openCellsRecursively(\n      allRows,\n      cell.rowIndex,\n      cell.cellIndex\n    );\n    cellsOpened += opened;\n  }\n\n  return {\n    opened: cellsOpened\n  };\n}\n","import { createStore } from \"redux\";\nimport { game } from \"./reducer\";\n\nexport const store = createStore(\n  game,\n  // @ts-ignore\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n","import { getInitialState } from \"../helpers/getInitialState\";\nimport { GridState, GameState } from \"./types\";\nimport { openCellsRecursively } from \"../helpers/openCellsRecursively\";\nimport {\n  ClickAction,\n  DoubleClickAction,\n  RightClickAction,\n  ResetGame,\n  NewGame\n} from \"./actionTypes\";\nimport { handleDoubleClickRecursively } from \"../helpers/handleDoubleClickRecursively\";\n\ntype ActionType =\n  | ClickAction\n  | DoubleClickAction\n  | RightClickAction\n  | ResetGame\n  | NewGame;\n\nexport function game(\n  state: GridState | undefined,\n  action: ActionType\n): GridState {\n  if (!state) {\n    return getInitialState(10, 10, 10);\n  }\n\n  switch (action.type) {\n    case \"click\": {\n      if (state.gameState !== \"game\" && state.gameState !== \"new\") {\n        return state;\n      }\n\n      const cell = state.rows[action.rowIndex][action.cellIndex];\n\n      if (cell.isOpen || cell.isMarked) {\n        return state; // already open or marked\n      }\n\n      if (cell.isMine) {\n        // game over\n        return {\n          rows: state.rows.map(row =>\n            row.map(cell => ({ ...cell, isOpen: true }))\n          ),\n          minesMarked: 0,\n          cellsOpened: state.rows.length * state.rows[0].length,\n          gameState: \"over\",\n          mines: state.mines\n        };\n      }\n\n      let cellsOpened = state.cellsOpened;\n      let minesMarked = state.minesMarked;\n      let gameState: GameState = \"game\";\n\n      const rows = state.rows.slice(); // copy main array\n\n      if (!cell.isOpen && cell.neighborMines === 0) {\n        // user clicked on free cell - open free cells recursevly\n        const { opened } = openCellsRecursively(\n          rows,\n          action.rowIndex,\n          action.cellIndex\n        );\n\n        if (\n          minesMarked === state.mines &&\n          cellsOpened + opened + minesMarked ===\n            state.rows.length * state.rows[0].length\n        ) {\n          // victory\n          console.log(\"!!!!!!!!!!!!!victoria!!!!!!!!!!!!!!!!!!\");\n          gameState = \"win\";\n        }\n\n        return {\n          rows,\n          minesMarked,\n          cellsOpened: cellsOpened + opened,\n          gameState,\n          mines: state.mines\n        };\n      }\n\n      rows[action.rowIndex] = rows[action.rowIndex].slice();\n\n      rows[action.rowIndex][action.cellIndex] = {\n        ...cell,\n        isOpen: true\n      };\n\n      cellsOpened++; // one cell is opened\n\n      if (\n        minesMarked === state.mines &&\n        cellsOpened + minesMarked === state.rows.length * state.rows[0].length\n      ) {\n        // victory\n        console.log(\"!!!!!!!!!!!!!victoria!!!!!!!!!!!!!!!!!!\");\n        gameState = \"win\";\n      }\n\n      return {\n        rows,\n        minesMarked,\n        cellsOpened,\n        gameState,\n        mines: state.mines\n      };\n    }\n\n    case \"rightClick\": {\n      if (state.gameState !== \"game\" && state.gameState !== \"new\") {\n        return state;\n      }\n\n      const cell = state.rows[action.rowIndex][action.cellIndex];\n\n      if (cell.isOpen) {\n        return state; // already opened and cannot be marked\n      }\n\n      const rows = state.rows.slice();\n\n      const minesMarked = state.minesMarked + (cell.isMarked ? -1 : 1);\n      rows[action.rowIndex][action.cellIndex] = {\n        ...cell,\n        isMarked: !cell.isMarked\n      };\n\n      let gameState: GameState = \"game\";\n\n      if (\n        minesMarked === state.mines &&\n        state.cellsOpened + minesMarked ===\n          state.rows.length * state.rows[0].length\n      ) {\n        // victory\n        console.log(\"!!!!!!!!!!!!!victoria!!!!!!!!!!!!!!!!!!\");\n        gameState = \"win\";\n      }\n\n      return {\n        rows,\n        minesMarked,\n        cellsOpened: state.cellsOpened,\n        gameState: gameState,\n        mines: state.mines\n      };\n    }\n\n    case \"doubleClick\": {\n      if (state.gameState !== \"game\") {\n        return state;\n      }\n\n      const cell = state.rows[action.rowIndex][action.cellIndex];\n      if (!cell.isOpen || cell.isMarked || cell.neighborMines === 0) {\n        return state;\n      }\n      const rows = state.rows.slice(); // copy main array\n      const { opened } = handleDoubleClickRecursively(\n        rows,\n        action.rowIndex,\n        action.cellIndex\n      );\n\n      if (opened === 0) {\n        return state;\n      }\n\n      let gameState: GameState = \"game\";\n\n      if (\n        state.minesMarked === state.mines &&\n        state.cellsOpened + opened + state.minesMarked ===\n          state.rows.length * state.rows[0].length\n      ) {\n        // victory\n        console.log(\"!!!!!!!!!!!!!victoria!!!!!!!!!!!!!!!!!! 111\");\n        gameState = \"win\";\n      }\n\n      return {\n        rows,\n        minesMarked: state.minesMarked,\n        cellsOpened: state.cellsOpened + opened,\n        gameState: gameState,\n        mines: state.mines\n      };\n    }\n\n    case \"reset\":\n      return getInitialState(action.rows, action.columns, action.mines);\n\n    case \"newGame\":\n      return getInitialState(\n        state.rows.length,\n        state.rows[0].length,\n        state.mines\n      );\n    default:\n      return state;\n  }\n}\n","import { CellValue } from \"../store/types\";\nimport {\n  getNeighborCells,\n  GetNeighborCellsResponseItem\n} from \"./getNeighborCells\";\nimport { openCellsRecursively } from \"./openCellsRecursively\";\n\ninterface HandleDoubleClickRecursivelyResponse {\n  opened: number;\n}\n\nexport function handleDoubleClickRecursively(\n  allRows: Array<CellValue[]>,\n  rowIndex: number,\n  cellIndex: number\n): HandleDoubleClickRecursivelyResponse {\n  const cell = allRows[rowIndex][cellIndex];\n  if (!cell.isOpen) {\n    return { opened: 0 };\n  }\n  const neighborCells = getNeighborCells(allRows, rowIndex, cellIndex);\n  const minesMarked = neighborCells.filter(cell => cell.cell.isMarked).length;\n  if (minesMarked !== cell.neighborMines) {\n    return { opened: 0 };\n  }\n  const notOpenedCells = neighborCells.filter(\n    cell => !cell.cell.isOpen && !cell.cell.isMarked && !cell.cell.isMine\n  );\n\n  let totalOpened = 0;\n\n  const nextCycleCells: Array<GetNeighborCellsResponseItem> = [];\n\n  for (const sealedCell of notOpenedCells) {\n    // this is needed if this cell was already opened by another cell\n    if (allRows[sealedCell.rowIndex][sealedCell.cellIndex].isOpen) {\n      continue; // already opened\n    }\n\n    if (sealedCell.cell.neighborMines === 0) {\n      const { opened } = openCellsRecursively(\n        allRows,\n        sealedCell.rowIndex,\n        sealedCell.cellIndex\n      );\n      totalOpened += opened;\n    } else {\n      allRows[sealedCell.rowIndex] = allRows[sealedCell.rowIndex].slice(); // copy row\n      allRows[sealedCell.rowIndex][sealedCell.cellIndex] = {\n        ...sealedCell.cell,\n        isOpen: true\n      };\n      totalOpened++;\n      nextCycleCells.push(sealedCell);\n    }\n  }\n\n  for (const openedCell of nextCycleCells) {\n    const { opened } = handleDoubleClickRecursively(\n      allRows,\n      openedCell.rowIndex,\n      openedCell.cellIndex\n    );\n    totalOpened += opened;\n  }\n\n  return {\n    opened: totalOpened\n  };\n}\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport {store} from \"./store/store\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}